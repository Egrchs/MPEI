$date
	Tue Oct 17 23:58:52 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RAM_32x_8_tb $end
$var wire 8 ! DATA_O [7:0] $end
$var parameter 32 " ADDR_WIDTH $end
$var parameter 32 # DATA_WIDTH $end
$var reg 8 $ ADDR_I [7:0] $end
$var reg 1 % CLK_I $end
$var reg 8 & DATA_I [7:0] $end
$var reg 1 ' WE_I $end
$scope module DUT $end
$var wire 8 ( ADDR_I [7:0] $end
$var wire 1 % CLK_I $end
$var wire 8 ) DATA_I [7:0] $end
$var wire 1 ' WE_I $end
$var parameter 32 * ADDR_WIDTH $end
$var parameter 32 + DATA_WIDTH $end
$var reg 8 , ADDR_O [7:0] $end
$var reg 8 - DATA_O [7:0] $end
$var reg 8 . addr_reg [7:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 / i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 +
b1000 *
b1000 #
b1000 "
$end
#0
$dumpvars
b0 /
bx .
bx -
bx ,
b10010010 )
b100010 (
0'
b10010010 &
0%
b100010 $
bx !
$end
#10
b100010 ,
b11101011 !
b11101011 -
b100010 .
1%
#20
0%
#30
1%
#40
0%
#50
1%
#60
0%
#70
1%
#80
0%
#90
1%
#100
0%
b1101001 $
b1101001 (
b1000000 &
b1000000 )
b1 /
#110
b1101001 ,
b1101011 !
b1101011 -
b1101001 .
1%
#120
0%
#130
1%
#140
0%
#150
1%
#160
0%
#170
1%
#180
0%
#190
1%
#200
0%
b10100 $
b10100 (
b100 &
b100 )
b10 /
#210
b10100 ,
b10111011 !
b10111011 -
b10100 .
1%
#220
0%
#230
1%
#240
0%
#250
1%
#260
0%
#270
1%
#280
0%
#290
1%
#300
0%
b11100011 $
b11100011 (
b110001 &
b110001 )
b11 /
#310
b11100011 ,
b111000 !
b111000 -
b11100011 .
1%
#320
0%
#330
1%
#340
0%
#350
1%
#360
0%
#370
1%
#380
0%
#390
1%
#400
0%
b1001111 $
b1001111 (
b10000110 &
b10000110 )
b100 /
#410
b1001111 ,
b1110001 !
b1110001 -
b1001111 .
1%
#420
0%
#430
1%
#440
0%
#450
1%
#460
0%
#470
1%
#480
0%
#490
1%
#500
0%
b100010 $
b100010 (
b11000110 &
b11000110 )
b101 /
1'
#510
b100010 ,
b11000110 !
b11000110 -
b100010 .
1%
#520
0%
#530
1%
#540
0%
#550
1%
#560
0%
#570
1%
#580
0%
#590
1%
#600
0%
b1101001 $
b1101001 (
b110010 &
b110010 )
b110 /
#610
b1101001 ,
b110010 !
b110010 -
b1101001 .
1%
#620
0%
#630
1%
#640
0%
#650
1%
#660
0%
#670
1%
#680
0%
#690
1%
#700
0%
b10100 $
b10100 (
b1001 &
b1001 )
b111 /
#710
b10100 ,
b1001 !
b1001 -
b10100 .
1%
#720
0%
#730
1%
#740
0%
#750
1%
#760
0%
#770
1%
#780
0%
#790
1%
#800
0%
b11100011 $
b11100011 (
b10000000 &
b10000000 )
b1000 /
#810
b11100011 ,
b10000000 !
b10000000 -
b11100011 .
1%
#820
0%
#830
1%
#840
0%
#850
1%
#860
0%
#870
1%
#880
0%
#890
1%
#900
0%
b1001111 $
b1001111 (
b1001 /
#910
b1001111 ,
b1001111 .
1%
#920
0%
#930
1%
#940
0%
#950
1%
#960
0%
#970
1%
#980
0%
#990
1%
#1000
0%
b100010 $
b100010 (
0'
#1010
b100010 ,
b11000110 !
b11000110 -
b100010 .
1%
#1020
0%
#1030
1%
#1040
0%
#1050
1%
#1060
0%
#1070
1%
#1080
0%
#1090
1%
#1100
0%
b1101001 $
b1101001 (
#1110
b1101001 ,
b110010 !
b110010 -
b1101001 .
1%
#1120
0%
#1130
1%
#1140
0%
#1150
1%
#1160
0%
#1170
1%
#1180
0%
#1190
1%
#1200
0%
b10100 $
b10100 (
#1210
b10100 ,
b1001 !
b1001 -
b10100 .
1%
#1220
0%
#1230
1%
#1240
0%
#1250
1%
#1260
0%
#1270
1%
#1280
0%
#1290
1%
#1300
0%
b11100011 $
b11100011 (
#1310
b11100011 ,
b10000000 !
b10000000 -
b11100011 .
1%
#1320
0%
#1330
1%
#1340
0%
#1350
1%
#1360
0%
#1370
1%
#1380
0%
#1390
1%
#1400
0%
b1001111 $
b1001111 (
#1410
b1001111 ,
b1001111 .
1%
#1420
0%
#1430
1%
#1440
0%
#1450
1%
#1460
0%
#1470
1%
#1480
0%
#1490
1%
#1500
0%
#1510
1%
#1520
0%
